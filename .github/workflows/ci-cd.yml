name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  VITE_API_URL: ${{ secrets.VITE_API_URL }}
  VITE_APP_ENV: production
  VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
  VITE_POSTHOG_KEY: ${{ secrets.VITE_POSTHOG_KEY }}
  VITE_POSTHOG_HOST: ${{ secrets.VITE_POSTHOG_HOST }}

jobs:
  # 프론트엔드 빌드 및 테스트
  frontend-test:
    name: Frontend Test & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

    - name: Run type check
      run: npm run type-check

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 1

  # 백엔드 테스트 및 린팅
  backend-test:
    name: Backend Test & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run Black formatter check
      run: black --check --diff .

    - name: Run isort check
      run: isort --check-only --diff .

    - name: Run flake8 linting
      run: flake8 .

    - name: Run mypy type checking
      run: mypy app/

    - name: Run pytest
      run: pytest app/tests/ -v --cov=app --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r backend/app/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan
        path: bandit-report.json
        retention-days: 7

  # Vercel 프론트엔드 배포
  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--prod'
        working-directory: ./frontend
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  # Railway 백엔드 배포
  deploy-backend:
    name: Deploy Backend to Railway
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: npm install -g @railway/cli

    - name: Deploy to Railway
      run: railway deploy
      working-directory: ./backend
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        APP_ENV: production

  # 알림
  notify:
    name: Deployment Notification
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK
